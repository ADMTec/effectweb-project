<?php
/**
 * Cetemaster Services
 * Cetemaster Framework v1.0
 *
 * File Management: XML - Create File
 * Author: $CTM['Erick-Master']
 * Last Update: 25/07/2012 - 16:42h
 *
 * Cetemaster Services, Limited
 * Copyright (c) 2010-2013. All Rights Reserved, 
 * www.cetemaster.com.br / www.cetemaster.com
*/

class FileManagement_XMLCreator extends FileManagement_XML
{
	/**
	 *	Lib Settings
	 *
	 *	@access	private
	 *	@var	array	Library Settings
	*/
	//private $settings		= array();
	/**
	 *	XML Data
	 *
	 *	@access	private
	 *	@var	array	XML Data
	*/
	private $xml_data		= array();
	/**
	 *	XML Elements
	 *
	 *	@access	private
	 *	@var	array	XML Elements
	*/
	private $xml_elements	= array();
	/**
	 *	XML Source
	 *
	 *	@access	private
	 *	@var	string	XML Builded
	*/
	private $xml_source		= NULL;
	
	/**
	 *	Class Constructor
	 *	Set up library settings
	 *
	 *	@param	array	Lib Settings
	 *	@return	void
	*/
	public final function __construct($settings)
	{
		//$this->settings = $settings;
	}
	/**
	 *	Create XML File
	 *	Start the process from creation of XML
	 *
	 *	@param	string	XML Name
	 *	@param	array	Body Arguments
	 *	@return	void
	*/
	public function CreateFile($xml_name, $xml_attributes = array(), $xml_header = array("1.0", "utf-8"))
	{
		$this->xml_data = array();
		$this->xml_elements = array();
		$this->xml_source = NULL;
		
		$this->xml_data['xml_name'] = $xml_name;
		$this->xml_data['xml_attributes'] = $xml_attributes;
		$this->xml_data['xml_header'] = $xml_header;
	}
	/**
	 *	Set Elements
	 *	Set the elements for XML
	 *
	 *	@param	array	XML Elements
	 *	@return	void
	*/
	public function SetElements($elements)
	{
		$this->xml_elements = $elements;
	}
	/**
	 *	Build XML
	 *	Build the XML source
	 *
	 *	@return	void
	*/
	public function BuildXML()
	{
		$xml_head = "<?xml version=\"".$this->xml_data['xml_header'][0]."\" encoding=\"".$this->xml_data['xml_header'][1]."\"?>\r\n";
		$xml_head .= "<".$this->xml_data['xml_name'];
		
		if(count($this->xml_data['xml_attributes']) > 0)
			foreach($this->xml_data['xml_attributes'] as $key => $value)
				$xml_head .= " ".$key."=\"".$value."\"";
					
		$xml_head .= ">\r\n";
		$xml_end = "</".$this->xml_data['xml_name'].">\r\n";
		$xml_end .= "<!-- Generated by Cetemaster PHP XML-Manipulation in ".date("d/m/Y - H:i:s")." -->";
		
		if(count($this->xml_elements) > 0)
		{
			$xml_body = NULL;
			
			foreach($this->xml_elements as $key => $element)
			{
				$key = preg_replace("/\#\:.*/i", NULL, $key);
				
				$element_head = "	<".$key;
				$element_body = NULL;
				$element_end = FALSE;
				
				if(is_array($element))
				{
					foreach($element as $k => $v)
					{
						$k = preg_replace("/\#\:.*/i", NULL, $k);
						$no_elements = true;
						
						if(substr($k, 0, 2) == "a:")
						{
							$element_head .= " ".substr($k, 2)."=\"".$this->Text()->EncodeAttribute($v)."\"";
							continue;
						}
						elseif($k == ":body" && $no_elements == true)
						{
							$element_body = $v;
							break;
						}
						elseif(is_array($v))
						{
							$no_elements = false;
							$element_end = true;
							$element_body .= $this->loadCompileElement($k, $v, 1);
						}
						elseif($no_elements == true)
						{
							$element_body .= "\r\n		<".$k.">".$v."</".$k.">	";
						}
					}
				}
				else
				{
					$element_body = $element;
				}
				
				if(empty($element_body))
					$xml_body .= $element_head." />\r\n";
				else
					$xml_body .= $element_head.">".$element_body.($element_end == true ? "\r\n	" : NULL)."</".$key.">\r\n";
			}
		}
		
		$this->xml_data = array();
		$this->xml_elements = array();
		$this->xml_source = (substr($xml_head, 0, 1) != "<" ? "<" : NULL).$xml_head.$xml_body.$xml_end.(substr($xml_end, -1, 1) != ">" ? ">" : NULL);
	}
	/**
	 *	Save XML
	 *	Save file and return the XML data
	 *
	 *	@param	string	File path (if void no save the file)
	 *	@return	string
	*/
	public function SaveXML($file_path = NULL)
	{
		if($file_path)
		{
			if($fp = fopen($file_path, "w"))
			{
				fwrite($fp, $this->xml_source);
				fclose($fp);
			}
		}
		
		$return = $this->xml_source;
		$this->xml_source = NULL;
		
		return $return;
	}
	/**
	 *	Private: Compile XML Element
	 *	Compile the XML Element
	 *
	 *	@param	string	Element key
	 *	@param	mixed	Element data
	 *	@param	integer	Skip elements
	 *	@return	string
	*/
	private function loadCompileElement($xml_key, $xml_element, $skip = 2)
	{
		$element_head = str_repeat("	", $skip)."<".$xml_key;
		$element_end = false;
		$count = count($xml_element);
		$_count = 0;
		
		foreach($xml_element as $key => $value)
		{
			$key = preg_replace("/\#\:.*/i", NULL, $key);
			$no_elements = true;
			$_skip = $skip;
			$_skip++;
			$_count++;
			
			if(substr($key, 0, 2) == "a:")
			{
				$element_head .= " ".substr($key, 2)."=\"".$this->Text()->EncodeAttribute($value)."\"";
				continue;
			}
			elseif(is_array($value))
			{
				$no_elements = false;
				$element_end = true;
				$element_body .= $this->loadCompileElement($key, $value, $_skip);
			}
			elseif($key == ":body" && $no_elements == true)
			{
				$element_body = $value;
			}
			elseif($no_elements == true)
			{
				$line = $_count == $count ? "\r\n" : NULL;
				$element_body .= "\r\n	".str_repeat("	", $_skip)."<".$key.">".$value."</".$key.">".$line.str_repeat("	", $_skip);
			}
			
			if($_count == $count)
			{
				$skip++;	
			}
		}
		
		if(empty($element_body))
			return "\r\n".$element_head." />";
		else
			return "\r\n	".$element_head.">".$element_body.($element_end == true ? "\r\n".str_repeat("	", $skip) : NULL)."</".$xml_key.">";
	}
}