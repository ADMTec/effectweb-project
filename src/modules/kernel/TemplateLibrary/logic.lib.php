<?php
/**
 * Cetemaster Services
 * Cetemaster Framework v1.0
 *
 * Template Engine: Converts HTML "logic" into PHP code
 * Author: $CTM['Erick-Master']
 * Last Update: 04/09/2012 - 20:48h
 *
 * Cetemaster Services, Limited
 * Copyright (c) 2010-2013. All Rights Reserved, 
 * www.cetemaster.com.br / www.cetemaster.com
*/

class TemplateEngine_Logic extends CTM_Template
{
	private $settings		= array();
	private $dqReplacement	= "{{^|^escapedDQ^|^}}";
	private $allowDelim		= array('"', "'");
	private $ifTags			= array("start" => "<if syntax=", "end" => "</if>", "else" => "<else />");
	private $foreachTags	= array("start" => "<foreach loop=", "end" => "</foreach>");
	private $skinFunctions	= array();
	private $foreachBlocks	= array();
	private $variables		= array();
	private $foreachCount	= 0;
	
	/**
	 *	Library Factory
	 *	Set up a library setting
	 *
	 *	@param	array	Library Settings
	 *	@return	void
	*/
	public function LibFactory($settings)
	{
		if(!$settings['PHPLibTags'])
			$settings['PHPLibTags'] = "Text";
			
		if(!$settings['PHPThisTags'])
			$settings['PHPThisTags'] = "settings|vars|request";
			
		if(!$settings['SystemName'])
			$settings['SystemName'] = "CTM Board";
			
		if(!$settings['CommandClass'])
			$settings['CommandClass'] = "CTM_Command";
			
		$this->settings = $settings;
	}
	/**
	 *	Prepare Class
	 *	Reset all variables and prepare to build
	 *
	 *	@return	void
	*/
	public function PrepareToBuild()
	{
		$this->skinFunctions = array();
		$this->foreachBlocks = array();
		$this->variables = array();
		$this->foreachCount = 0;
	}
	/**
	 *	Compile Skin File
	 *	Converts HTML logic to eval file
	 *
	 *	@param	string	File name
	 *	@param	string	Class name
	 *	@param	string	Save path
	 *	@return	string	File compiled
	*/
	public function CompileSkinFile($file_name, $class_name, $save_path = NULL)
	{
		$date = date("d/m/Y - H:i");
		$yy = date("Y");
		
		$skinFile = "<?php\n";
		$skinFile .= "/***********************************************************/\n";
		$skinFile .= "/* Cetemaster Services, Limited                            */\n";
		$skinFile .= "/* Copyright (c) 2010-$yy. All Rights Reserved,           */\n";
		$skinFile .= "/* www.cetemaster.com.br / www.cetemaster.com              */\n";
		$skinFile .= "/***********************************************************/\n";
		$skinFile .= "/* File generated by Cetemaster PHP Template Engine        */\n";
		$skinFile .= "/* Cache file: ".str_pad($file_name, 44, " ")."*/\n";
		$skinFile .= "/* Cache generated in ".str_pad($date."h", 37, " ")."*/\n";
		$skinFile .= "/***********************************************************/\n";
		$skinFile .= "/* This is a cache file generated by ".str_pad($this->settings['SystemName'], 22, " ")."*/\n";
		$skinFile .= "/* DO NOT EDIT DIRECTLY                                    */\n";
		$skinFile .= "/* The changes are not saved to the database automatically */\n";
		$skinFile .= "/***********************************************************/\n";
		
		$skinFile .= "\n";
		$skinFile .= "class {$class_name} extends ".$this->settings['CommandClass']."\n{\n";
		$skinFile .= implode(NULL, $this->skinFunctions);
			
		$skinFile .= "\n";
		
		if(count($this->foreachBlocks) > 0)
		{
			$skinFile .= "	//============================================\n";
			$skinFile .= "	// Begin: Foreach functions\n";
			$skinFile .= "	//============================================\n";
			$skinFile .= implode("\n", $this->foreachBlocks);
			$skinFile .= "\n";
			$skinFile .= "	//============================================\n";
			$skinFile .= "	// End: Foreach functions\n";
			$skinFile .= "	//============================================\n";
		}
		
		$skinFile .= "}\n";
		$skinFile .= "\$callSkinCache = new {$class_name}();\n\$callSkinCache->registry();";
		
		if(strstr($skinFile, "<xxforeach"))
			$skinFile = preg_replace("/([\n]{0,})<xxforeach_(.*?)xx>(.*?)<\/xxforeach_(.*?)>/si", "\".$3.\"", $skinFile);
		
		$this->skinFunctions = array();
		$this->foreachBlocks = array();
		$this->variables = array();
		$this->foreachCount = 0;
		
		if(!empty($save_path))
		{
			try
			{
				$fp = fopen($save_path, "wb");
				fwrite($fp, $skinFile);
				fclose($fp);
			}
			catch(Exception $e)
			{
				
			}
		}
		return $skinFile;
	}
	/**
	 *	Convert HTML to PHP
	 *	Converts HTML logic to PHP code
	 *
	 *	@param	string	Function name
	 *	@param	string	Function data
	 *	@param	string	HTML content
	 *	@return	string	Converted content
	*/
	public function ConvertHTMLToPHP($html_content, $func_name, $func_data = NULL, $func_vars = NULL)
	{
		$htmlContent = $this->loadCompileHTMLContent($html_content, $func_name);
		$htmlContent = $this->loadProcessParseTags($htmlContent);
		$htmlContent = preg_replace("/\{CTM_(".$this->settings['PHPLibTags'].")\:\:([^\}]*?)\}/", '".CTM_$1::$2."', $htmlContent);
		$htmlContent = preg_replace("/\{\\\$this->(".$this->settings['PHPThisTags'].")->([^\}]*?)\}/", "\$this->$1->$2", $htmlContent);
		$htmlContent = str_replace('\\\"', '\\\\"', $htmlContent);
		$htmlContent = str_replace('\\\\\"', '\\\\"', $htmlContent);
		$htmlContent = str_replace("\\\\$", "\\$", $htmlContent);
		$tab = chr(9).chr(9);
		
		$codeBegin = "	//============================================\n";
		$codeBegin .= "	// Begin: ".$func_name."\n";
		$codeBegin .= "	//============================================\n";
		
		$codeEnd = "	//============================================\n";
		$codeEnd .= "	// End: ".$func_name."\n";
		$codeEnd .= "	//============================================\n";
		
		$phpStart = "	public function {$func_name}({$func_data}) \n	{\n";
		$phpMiddle = "		\$CTM_HTML = NULL;\n		\$CTM_HTML .= ";
		$phpMiddle .= "\"".$htmlContent."\";";
		$phpEnd = "\n		return \$CTM_HTML;\n	}\n";
		
		$phpTags = trim($this->loadProcessPHPTags(addslashes($htmlContent)));
		$phpMiddle = str_replace($this->dqReplacement, '\\"', $phpMiddle);
		$phpMiddle = str_replace('\\\\"', '\\\\\\"', $phpMiddle);
		$phpMiddle = str_replace("\\n", "\\\\n", $phpMiddle);
		$phpMiddle = preg_replace("/([\n\r]{0,})?<php>(.*?)<\/php>([\n\r]{0,})?/is", NULL, $phpMiddle);
		
		if(!empty($phpTags))
			$phpTags = $tab."/* Start PHP Codes */\n".$tab.$phpTags."\n".$tab."/* End PHP Codes */\n\n";
			
		preg_match_all("/\{\\\$(.*?)\}/is", $phpMiddle, $match);
		if(count($match[0]) > 0 || count($this->variables) > 0)
		{
			$variables = array();
			$global = NULL;
			
			if(count($match[0]) > 0)
			{
				foreach($match[1] as $var)
				{
					$var = preg_replace("/(\[|->|\)).*/i", NULL, $var);
					$escape = array("this", "GLOBALS", "_SERVER", "_REQUEST", "_POST", "_GET", "_FILES");
					
					if(!in_array($var, $variables) && !in_array($var, $escape))
					{
						$global .= "\$".$var.", ";
						$variables[] = $var;
					}
				}
			}
			if(count($this->variables) > 0)
			{
				foreach($this->variables as $var)
				{
					$var = preg_replace("/(\[|->|\)).*/i", NULL, $var);
					if(!in_array($var, $variables))
					{
						$global .= "\$".$var.", ";
						$variables[] = $var;
					}
				}
			}
			
			if(count($variables) > 0)
			{
				if(substr($global, strlen($global) - 2, 2) == ", ")
					$global = substr_replace($global, ";", strlen($global) - 2, 1);
					
				$phpGlobal = $tab."global ";
				$phpGlobal .= $global;
				$phpGlobal .= " // PHP Globals\r\n\r\n";
			}
		}
		
		$this->variables = array();	
		return $this->skinFunctions[$func_name] = $codeBegin.$phpStart.$phpGlobal.$phpTags.$phpMiddle.$phpEnd.$codeEnd;
	}
	/**
	 *	Compile HTML Content
	 *	Compile the HTML content
	 *
	 *	@param	string	Content
	 *	@return	stirng	Converted content
	*/
	private function loadCompileHTMLContent($content, $func_name, $func_data = NULL)
	{
		$doForeach = FALSE;
		$doIf = FALSE;
		
		if(strstr($content, $this->foreachTags['start']))
			$doForeach = TRUE;
		
		if(strstr($content, $this->ifTags['start']))
			$doIf = TRUE;
			
		if($doIf == true || $doForeach == true)
			$content = addslashes($content);
		else
			return str_replace('"', '\"', $this->loadProcessTags($content));
		
		if($doForeach == true)
			$content = $this->loadProcessForeachLogic($content, $func_name, $func_data);
				
		if($doIf == true)
			$content = $this->loadProcessHTMLLogic($content);
			
		if($doForeach == true)
			if(strstr($content, "<xxforeach"))
				$content = preg_replace("/([\n]{0,})<xxforeach_(.*?)xx>(.*?)<\/xxforeach_(.*?)>/si", "\".$3.\"", $content);
			
		return ($doIf == true || $doForeach == true ? str_replace("\\\\$", "\\$", $content) : $content);
	}
	/**
	 *	Process Foreach Logic
	 *	Process the HTML logic (foreach)
	 *
	 *	@param	string	Content
	 *	@param	string	Function name
	 *	@return	stirng	Converted content
	*/
	private function loadProcessForeachLogic($content, $func_name, $func_data = NULL)
	{
		$length = strlen($content);
		$template = $content;
		
		$found_foreach = -1;
		$found_endForeach = -1;
		
		$tempFuncData = explode(",", $func_data);
		$newFuncData = array();
		$_newFuncData = array();
		
		foreach($tempFuncData as $value)
		{
			preg_match("/\\$(.*?) /i", $value, $match);
			
			if(count($match))
			{
				$newFuncData[] = "$".$match[1];
				$_newFuncData[] = $match[1];
			}
		}
		
		$clean_funcData = implode(", ", $newFuncData);
		
		while(true)
		{
			$end = 0;
			
			if(!$found_foreach = strpos($template, $this->foreachTags['start'], $found_endForeach + 1))
				break;
				
			$start = $found_foreach + strlen($this->foreachTags['start']) + 2;
			$delim  = $template[$start - 1];
			
			if(!in_array($delim, $this->allowDelim))
			{
				$found_endForeach = $found_foreach + 1;
				continue;
			}
			
			if(!$found_endForeach = strpos($template, $this->foreachTags['end'], $start + 3))
				return str_replace("\\'", "'", $template);
				
			for($i = $start; $i < $length; $i++)
			{
				if ($template[$i] == $delim  && $template[$i - 2] != "\\" && $template[$i + 1] == ">" )
				{
					$end = $i - 1;
					break;
				}
			}
			
			if(!$end)
				return str_replace("\\'", "'", $template);
				
			$statement = substr($template, $start, $end - $start);
			
			if(empty($statement))
			{
				$found_endForeach = $found_foreach + 1;
				continue;
			}
			
			if($template[$end + 2] != ">")
			{
				$found_endForeach = $found_foreach + 1;
				continue;
			}
			
			$recurse = $found_foreach;
			$count = 0;
			
			while(true)
			{
				$recurse = strpos($template, $this->foreachTags['start'], $recurse + 1);
				
				if(!$recurse || $recurse >= $found_endForeach)
					break;
				
				$endRecurse = $found_endForeach;
				$found_endForeach = strpos($template, $this->foreachTags['end'], $endRecurse + 1);
				
				if(!$endRecurse)
					return str_replace("\\'", "'", $template);
			}
			
			$recurseLength = $found_endForeach - strlen($this->foreachTags['end']) + 1 - $end + 1;
			$block = substr($template, $end + 3, $recurseLength + 5);
			$variable = trim(preg_replace("/(.*?)as \\\$.*/is", "$1", $statement));
			$keep = trim(preg_replace("/(.*?)as (\\\$.*?)/is", "$2", $statement));
			
			if(strstr($keep, "=>"))
			{
				list($key, $value) = explode("=>", $keep);
				
				$key = str_replace("$", NULL, trim($key));
				$value = str_replace("$", NULL, trim($value));
			}
			
			$keep = str_replace("$", NULL, $keep);
			
			if(strpos($block, $this->foreachTags['start']) > 0)
			{
				$_func_data = $func_data;
				
				if(strstr(strtolower($statement), "as"))
				{
					list($trash, $_keep) = explode(" as", $statement);
					$_keep = trim($_keep);
					
					if(strstr($_keep, "=>"))
					{
						list($_key, $_value) = explode("=>", $_keep);
						
						$_key = trim($_key);
						$_value = trim($_value);
						
						$_func_data .= ", {$_key} = NULL, {$_value} = NULL";
					}
					else
						$_func_data .= ", {$_keep} = NULL";
				}
				
				$block = $this->loadProcessForeachLogic($block, $func_name, trim($_func_data, ", "));
			}
			
			$str_find = array('\\"', '\\\\', "\\'", "\\$delim");
			$str_replace = array('"', '\\', "'", $delim);
			$statement = str_replace($str_find, $str_replace, $statement);
			
			$count++;
			$foreach_name = "loop__".$func_name."__".($number = "0x".str_pad(strtoupper(dechex($this->foreachCount++)), 2, 0, STR_PAD_LEFT));
			
			$php_statement = "<xxforeach_".$foreach_name."xx>\$this->".$foreach_name."(".$clean_funcData.")</xxforeach_".$foreach_name."xx>";
			$php_tags = str_replace("\\'", "'", $this->loadProcessPHPTags(addslashes($block)));
			$php_block = str_replace($str_find, $str_replace, $block);
			$php_block = $this->loadProcessHTMLLogic(addslashes($php_block), true);
			$php_block = $this->loadProcessParseTags($php_block);
			$php_block = preg_replace("/([\n\r]{0,})?<php>(.*?)<\/php>([\n\r]{0,})?/is", NULL, $php_block);
			$php_vars = $this->loadProcessPHPTags($php_block);
			$php_vars[] = preg_replace("/([^a-zA-Z0-9_]).*/i", NULL, str_replace("$", NULL, $variable));
			
			$escape = array("this", "GLOBALS", "_SERVER", "_REQUEST", "_POST", "_GET", "_FILES");
			
			$global_count = 0;
			$php_global = NULL;
			$var_global = NULL;
				
			if(count($php_vars) > 0)
			{
				foreach($php_vars as $var)
				{
					if($var != $keep && $var != $key && $var != $value && !in_array($var, $_newFuncData) && !in_array($var, $escape))
					{
						$var_global .= "$".$var.", ";
						$global_count++;
					}
				}
			}
					
			if($global_count > 0)
			{	
				$php_global = "		global ".$var_global;
				$php_global = substr_replace($php_global, ";", strlen($php_global) - 2, 2);
				$php_global .= " // PHP Globals\r\n";
			}
			$variable = str_replace(array("\\\\", "\\'"), array("\"", "'"), $variable);
			$foreachBlock = "	/* ".$func_name." : ".$number." */\n";
			$foreachBlock .= "	private function {$foreach_name}({$func_data})\n	{\n";
			$foreachBlock .= $php_global;
			$foreachBlock .= "		\$content = NULL;\n\n";
			$foreachBlock .= "		if(count({$variable}) > 0)\n		{\n";
			$foreachBlock .= "			foreach({$statement})\n			{\n";
			$foreachBlock .= "		".$php_tags;
			$foreachBlock .= "		\$content .= \"".ltrim($php_block)."\";\n";
			$foreachBlock .= "			}\n		}\n		return rtrim(\$content);";
			$foreachBlock .= "\n	}";
			$this->foreachBlocks[] = $foreachBlock;
			
			$template = substr_replace($template, $php_statement, $found_foreach, $found_endForeach + strlen($this->foreachTags['end']) - $found_foreach);
			$length = strlen($template);
			$found_endForeach = $found_foreach + strlen($php_statement) - 1;
		}
		
		return str_replace("\\'", "'", $template);
	}
	/**
	 *	Process HTML Logic
	 *	Process the normal HTML logic (if, else / onstant)
	 *
	 *	@param	string	Content
	 *	@return	stirng	Converted content
	*/
	private function loadProcessHTMLLogic($content, $in_foreach = FALSE)
	{
		$template = $content;
		$length = strlen($content);
		
		$found_if = -1;
		$found_endIf = -1;
		$found_else = -1;
		
		while(true)
		{
			$length = strlen($template);
			$end = 0;
			
			if(!strstr($template, $this->ifTags['start']))
				break;
				
			$found_if = strpos($template, $this->ifTags['start'], $found_endIf + 1);
			$start = $found_if + strlen($this->ifTags['start']) + 2;
			$delim  = $template[$start - 1];
			
			if(!in_array($delim, $this->allowDelim))
			{
				$found_endIf = $found_if + 1;
				continue;
			}
			
			if(!$found_endIf = strpos($template, $this->ifTags['end'], $start + 3))
				return str_replace("\\'", "'", $template);
				
			for($i = $start; $i < $length; $i++)
			{
				if ($template[$i] == $delim  && $template[$i - 2] != "\\" && $template[$i + 1] == ">" )
				{
					$end = $i - 1;
					break;
				}
			}
			
			if(!$end)
				return str_replace("\\'", "'", $template);
				
			$statement = substr($template, $start, $end - $start);
			
			if(empty($statement))
			{
				$found_endIf = $found_if + 1;
				continue;
			}
			
			if($template[$end + 2] != ">")
			{
				$found_endIf = $found_if + 1;
				continue;
			}
			
			$recurse = $found_if;
			
			while(true)
			{
				$recurse = strpos($template, $this->ifTags['start'], $recurse + 1);
				
				if(!$recurse || $recurse >= $found_endIf)
					break;
				
				$endRecurse = $found_endIf;
				$found_endIf = strpos($template, $this->ifTags['end'], $endRecurse + 1);
				
				if(!$endRecurse)
					return str_replace("\\'", "'", $template);
			}
			
			$found_else = strpos($template, $this->ifTags['else'], $end + 3);
			
			while(true)
			{
				if(!$found_else || $found_else >= $found_endIf)
				{
					$found_else = -1;
					break;
				}
				
				$tmp = substr($template, $end + 3, $found_else - $end + 3);
				$open_if = substr_count($tmp, $this->ifTags['start']);
				$close_if = substr_count($tmp, $this->ifTags['end']);
				
				if($open_if == $close_if)
					break;
				
				$found_else = strpos($template, $this->ifTags['else'], $found_else + 1);
			}
			
			if($found_else == -1)
			{
				$recurseLength = $found_endIf - strlen($this->ifTags['end']) + 1 - $end + 1;
				$true = substr($template, $end + 3, $recurseLength);
				$false = NULL;
			}
			else
			{
				$recurseLength = $found_else - $end - 3;
				$true = substr($template, $end + 3, $recurseLength);
				
				$recurseLength = $found_endIf - strlen($this->ifTags['end']) - $found_else - 3;
				$false = substr($template, $found_else + strlen($this->ifTags['else']), $recurseLength);
			}
			
			if(strpos($true, $this->ifTags['start']) > 0)
				$true = trim($this->loadProcessHTMLLogic($true));
				
			if(strpos($false, $this->ifTags['start']) > 0)
				$false = trim($this->loadProcessHTMLLogic($false));
				
			$str_find = array('\\"', '\\\\');
			$str_replace = array('"', '\\');
			
			if($delim == "'")
			{
				$str_find[] = "\\'";
				$str_replace[] = "'";
			}
	
			$str_find[] = "\\$delim";
			$str_replace[] = $delim;
			
			$statement = str_replace($str_find, $str_replace, $statement);
			
			if($in_foreach == false)
				$this->variables = array_merge($this->variables, $this->loadProcessPHPVariables($statement));
			
			$php_statement = sprintf("\".(%s ? %s : %s).\"", $statement, $this->loadSetIfContent($true), $this->loadSetIfContent($false));
			$template = substr_replace($template, $php_statement, $found_if, $found_endIf + strlen($this->ifTags['end']) - $found_if);
			$found_endIf = $found_if + strlen($php_statement) - 1;
		}
		
		return str_replace("\\'", "'", $template);
	}
	/**
	 *	Process Escape Tags
	 *	Converts PHP '$' tab to '\$'
	 *
	 *	@param	string	Content
	 *	@return	string	Converted content
	*/
	private function loadProcessTags($content)
	{
		$countTags = substr_count($content, "$");
		$replaces = array();
		$count = 0;
		
		while(true)
		{
			if($count == $countTags)
				break;
				
			$found_tag = strpos($content, "$");
			
			if($found_tag > 0 )
			{
				$statement = substr($content, $found_tag - 1, 1);
				$php_statement = substr($content, $found_tag - 2, 2);
				
				if($statement != "{" && $statement != "." && $statement != "\\" && $php_statement != ".(")
					$content = substr_replace($content, "<##php_tag_escape_xxxxxx##>", $found_tag, 1);
			}
			$count++;
		}
		
		return str_replace("<##php_tag_escape_xxxxxx##>", "\\"."$", $content);
	}
	/**
	 *	Process PHP Variables
	 *	Search and return all variables no-global
	 *
	 *	@param	string	Content
	 *	@return	array	Variables name
	*/
	private function loadProcessPHPVariables($content)
	{
		$content = trim($content);
		$return_variables = array();
		$variables = array();
		$inVariable = FALSE;
		$startVariable = -1;
		
		for($i = 0; $i <= strlen($content); $i++)
		{
			if($content{$i} == "$")
			{
				$inVariable = TRUE;
				$startVariable = $i;
				continue;
			}
				
			if($inVariable == true)
			{
				if(eregi("[^a-zA-Z0-9_]", $content{$i}))
				{
					$variables[] = substr($content, $startVariable + 1, $i - 1);
						
					$inVariable = FALSE;
					$startVariable = -1;
					continue;
				}
			}
		}
			
		if(count($variables) > 0)
		{
			foreach($variables as $var)
			{
				$var = preg_replace("/([^a-zA-Z0-9_]).*/i", NULL, $var);
				$escape = array("this", "GLOBALS", "_SERVER", "_REQUEST", "_POST", "_GET", "_FILES");
				
				if(!in_array($var, $return_variables) && !in_array($var, $escape))
				{
					$return_variables[] = $var;
				}
			}
		}
		
		return $return_variables;
	}
	/**
	 *	Process PHP Tags
	 *	Converts HTML '<php>' tag to PHP code
	 *
	 *	@param	string	Content
	 *	@return	string	Converted content
	*/
	private function loadProcessPHPTags($content)
	{
		$php = NULL;
		preg_match_all("/<php>(.*?)<\/php>/is", $content, $match);
		
		foreach($match[1] as $value)
		{
			$php_code = trim($value);
			
			$str_find = array('\\"', '\\\"', '\\\\\\"', "\\\\", "\\'", $this->dqReplacement);
			$str_replace = array('"', '"', '\\"', "\\", "'", '\\"');
			
			$php_code = str_replace($str_find, $str_replace, $php_code);
			$php .= $php_code."\r\n";
		}
		
		return $php;
	}
	/**
	 *	Process Parse Tags
	 *	Process the CTM parse tags
	 *
	 *	@param	string	Content
	 *	@return	string	Converted content
	*/
	private function loadProcessParseTags($content)
	{
		preg_match_all("/\{(template|const)=(.*?)\}/is", $content, $match);
		
		if(count($match[1]) > 0)
		{
			foreach($match[1] as $i => $key)
			{
				$value = str_replace('\"', '"', $match[2][$i]);
				$clear = str_replace(array("\\", "'", '"'), NULL, $value);
				$replace = FALSE;
				
				switch($key)
				{
					case "template" :
						if(strstr($clear, "::") == true)
						{
							list($file, $function) = explode("::", $clear);
							$replace =  "\".\$this->output->loadPublicCache(\"{$file}\", \"{$function}\").\"";
						}
						else
							$replace = "\".\$this->{$clear}().\"";
					break;
					case "const" :
						$replace = "\".({$clear}).\"";
					break;
				}
				
				if($replace)
				{
					$value = str_replace('"', '\\"', $value);
					$content = preg_replace("/\{{$key}=".preg_quote($value)."\}/is", $replace, $content);
				}
			}
		}
		
		return $content;
	}
	/**
	 *	Set If Content
	 *	Compile the if content
	 *
	 *	@param	string	Content
	 *	@return	string	Compiled content
	*/
	private function loadSetIfContent($content)
	{
		$content = trim($content);
		
		if(is_numeric($content))
			return intval($content);
			
		elseif(is_bool($content))
			return $content == true ? "TRUE" : "FALSE";
			
		elseif(empty($content))
			return "NULL";
			
		if($bool = preg_replace("/\{\#bool\:\:(.*?)\}/i", "$1", strtolower(trim($content))))
			if($bool == "true" || $bool == "false")
				return $bool == "true" ? "TRUE" : "FALSE";
				
		return '"'.$content.'"';
	}
}